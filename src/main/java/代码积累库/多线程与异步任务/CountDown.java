package 代码积累库.多线程与异步任务;

public class CountDown {
    //当计数器的值降为0时，所有等待的线程都会被唤醒，然后开始执行下一步操作。

    //CountDownLatch的常见应用场景：
    //
    //
    // 等待多个线程执行完毕：如果有多个线程需要执行，但是必须等待所有线程都执行完毕才能进行下一步操作，可以使用CountDownLatch来实现。我们可以创建一个CountDownLatch对象，并将计数器的值初始化为线程数，每个线程执行完毕后，调用countDown()方法将计数器减1。最后，在主线程中调用await()方法等待所有线程执行完毕。
    //
    //
    // 控制线程的执行顺序：如果有多个线程需要按照特定的顺序执行，可以使用CountDownLatch来实现。我们可以创建多个CountDownLatch对象，每个对象的计数器的值都为1，表示只有一个线程可以执行。线程执行完毕后，调用下一个CountDownLatch对象的countDown()方法，唤醒下一个线程。
    //
    //
    // 等待外部事件的发生：如果我们需要等待一个外部事件的发生，例如某个网络连接的建立或某个文件的读取完成，可以使用CountDownLatch来实现。我们可以在主线程中创建一个CountDownLatch对象，并将计数器的值初始化为1，然后在另一个线程中等待外部事件的发生。当外部事件发生时，调用CountDownLatch对象的countDown()方法，唤醒主线程继续执行。
    //
    //
    // 控制并发线程数：如果我们需要控制并发线程的数量，可以使用CountDownLatch来实现。我们可以创建一个CountDownLatch对象，并将计数器的值初始化为线程数量，每个线程执行完毕后，调用countDown()方法将计数器减1。如果某个线程需要等待其他线程执行完毕，可以调用await()方法等待计数器的值变为0。

}
